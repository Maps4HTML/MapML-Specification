datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes" 
default namespace = "http://www.w3.org/1999/xhtml"
start = mapml-viewer
mapml-viewer = element mapml-viewer { map-layer*, 
    attribute lat {text},  
    attribute lon {text}, 
    attribute zoom {text}, 
    attribute projection { "OSMTILE" | "CBMTILE" | "APSTILE" | "WGS84" },
    attribute controls {text}?,
    attribute controlslist { text }?,
    attribute height {text}?,
    attribute width {text}?,
    attribute static {text}?,
    map-caption?,
    map-layer*
}
map-caption = element map-caption { text }
map-layer = element map-layer {
    attribute src { xsd:anyURI }?,
    attribute label {text}?,
    attribute checked {text}?,
    attribute hidden {text}?,
    attribute opacity {text}?,
    (headContent?, bodyContent+)
}*
map-link = element map-link { 
        attribute href { xsd:anyURI }?,
        # can have a tref (when in extent) or an href (but not both)
        attribute tref { text }?,
        # @rel=alternate + @projection=tcrs-name is proposed as a way of negotiating the tcrs of the service: https://github.com/Maps4HTML/MapML/issues/11
        attribute rel {  text },
        attribute projection { "OSMTILE" | "CBMTILE" | "APSTILE" | "WGS84" }?,
        attribute title { text }?,
        attribute type { text }?,
        attribute hreflang { text }?
    }
map-links = map-link*
headContent =  
    element map-base { 
        attribute href {text}
    }? &
    element map-meta {
        attribute name {text}?,
        attribute charset {text}?,
        attribute content {text}?,
        attribute http-equiv {text}?
    }* &
    element map-style { text }? &
    element map-title { text }? &
    map-links
bodyContent =  map-extent? & map-links & (map-feature | map-tile | map-image)*  
map-extent = element map-extent {
  attribute units  { "OSMTILE" | "CBMTILE" | "APSTILE" | "WGS84" }?,
  (map-inputs* & map-links* & select* & label*)?
}
map-inputs = (element map-input {
  attribute name { text },
  # xmin, ymin, xmax, ymax and projection are deprecated. If you need to transmit a projection, use a hidden input/variable
  # for xmin etc, use a input@type=location with appropriate position, units, axis values.
  attribute type { "zoom" | "hidden" | "location" | "datetime" | "width" | "height" },
  attribute value { text }?,
  attribute rel { "image" | "tile" | "pixel" }?,
  attribute shard { text }?,
  attribute list { text }?,
  # position tokens are based on /composed from the set of keywords used for CSS object-position, but they are obviously unique tokesn and not combinable otherwise
  # https://developer.mozilla.org/en-US/docs/Web/CSS/object-position 
  attribute position { "top-left" | "top-right" | "bottom-left" | "bottom-right" | "center-left" | "center-right" | "top-center" | "bottom-center" | "center" }?,
  attribute axis { "latitude" | "longitude" | "easting" | "northing" | "x" | "y" | "row" | "column" | "i" | "j" }?,
  attribute units {"gcrs" | "pcrs" | "tcrs" | "map" | "tilematrix" | "tile" }?,
  attribute required { xsd:boolean }?,
  attribute min { xsd:double }?,
  attribute max { xsd:double }?,
  attribute step { text }?
})
label = element map-label {
  attribute for { text },
  text
}
select = element map-select {
  attribute id { text },
  attribute name { text },
  option+
}
option = element map-option {
  attribute value { text }?,
  attribute label { text }?,
  text
}
map-feature = element map-feature {
    attribute id { text }?,
    attribute class { text }?,
    attribute zoom { text }?,
    attribute min { text }?,
    attribute max { text }?,
    (map-geometry? & map-properties? & map-featurecaption?)
}
map-tile = element map-tile {
    attribute col { xsd:integer },
    attribute row { xsd:integer },
    ImageResourceMetadataAttributes
}
bbox = element map-bbox { twoPositions }
map-image =    element map-image { ImageModel }

map-geometry = element map-geometry {
  attribute cs { "gcrs" | "pcrs" | "tcrs" | "map" | "tilematrix" | "tile" }?,
  (GeometryContent | map-a)
  }
map-properties = element map-properties { PropertyContent }
map-featurecaption = element map-featurecaption { text? }

ImageResourceMetadataAttributes =  
    attribute src { text },
    imageLocation?,
    imageSize?,
    attribute angle { xsd:double }?,
    attribute type { text }?
ImageModel =  ImageResourceMetadataAttributes
# allow any property/value via simple elements with allowed text content
# see https://www.oreilly.com/library/view/xml-pocket-reference/9780596100506/re92.html
PropertyContent = any_element 
any_element = element *  { (attribute * { text } | text | any_element)* }
any_attribute = attribute * { text }
imageLocation = attribute x { xsd:double }, attribute y { xsd:double }
imageSize = attribute width { xsd:integer },attribute height { xsd:integer }

GeometryContent =  map-point | map-linestring | map-polygon | map-multipoint | map-multilinestring | map-multipolygon | map-geometrycollection
map-a = element map-a { 
  attribute href { text },
  attribute target { "_self" | "_top" | "_blank" | "_parent" }?,
  attribute type { "text/mapml" | "text/html" }?,
  (GeometryContent | text | span_element | coordinates_mixed)}
map-point = element map-point { map-a | coordinates_mixed }
map-linestring = element map-linestring { map-a | coordinates_mixed }
map-polygon = element map-polygon { map-a* & coordinates_mixed+ }
map-multipoint = element map-multipoint { map-a | coordinates_mixed }
map-multilinestring = element map-multilinestring { map-a* & coordinates_mixed+ }
map-multipolygon = element map-multipolygon { map-a* & map-polygon+ }
map-geometrycollection = element map-geometrycollection {
    (map-point* & map-linestring* & map-polygon* & map-multipoint* & map-multilinestring* & map-multipolygon*)
}
span_element = element map-span { 
                  mixed {
                    attribute * { text }*&
                    span_element* &
                    map-a*
                  }
               }
coordinates_mixed = element map-coordinates  { mixed { span_element* & map-a* } } 
# for bbox content, omits coordinates element
twoPositions =  list  { (xsd:double, xsd:double, xsd:double, xsd:double) } 

